{"id":"node_modules/ethers/lib.esm/hash/message.js","dependencies":[{"name":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\message.js.map","includedInParent":true,"mtime":1724758823031},{"name":"E:\\myprojects\\blockchain\\node_modules\\ethers\\src.ts\\hash\\message.ts","includedInParent":true,"mtime":1724758823299},{"name":"E:\\myprojects\\blockchain\\package.json","includedInParent":true,"mtime":1724758869620},{"name":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\package.json","includedInParent":true,"mtime":1724758822876},{"name":"../crypto/index.js","loc":{"line":1,"column":26,"index":26},"parent":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\message.js","resolved":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\crypto\\index.js"},{"name":"../constants/index.js","loc":{"line":2,"column":30,"index":78},"parent":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\message.js","resolved":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\constants\\index.js"},{"name":"../transaction/index.js","loc":{"line":3,"column":31,"index":134},"parent":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\message.js","resolved":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\transaction\\index.js"},{"name":"../utils/index.js","loc":{"line":4,"column":36,"index":197},"parent":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\message.js","resolved":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\utils\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashMessage = hashMessage;\nexports.verifyMessage = verifyMessage;\nvar _index = require(\"../crypto/index.js\");\nvar _index2 = require(\"../constants/index.js\");\nvar _index3 = require(\"../transaction/index.js\");\nvar _index4 = require(\"../utils/index.js\");\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nfunction hashMessage(message) {\n  if (typeof message === \"string\") {\n    message = (0, _index4.toUtf8Bytes)(message);\n  }\n  return (0, _index.keccak256)((0, _index4.concat)([(0, _index4.toUtf8Bytes)(_index2.MessagePrefix), (0, _index4.toUtf8Bytes)(String(message.length)), message]));\n}\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nfunction verifyMessage(message, sig) {\n  const digest = hashMessage(message);\n  return (0, _index3.recoverAddress)(digest, sig);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":4}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":10}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":13}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":20}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":4}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":11}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":14}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":9,"column":21}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":4}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":11}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":14}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":21}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":4}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":11}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":14}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":11,"column":21}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":7,"column":0},"generated":{"line":12,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":35,"column":6},"generated":{"line":40,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":35,"column":16},"generated":{"line":40,"column":9}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":35,"column":27},"generated":{"line":40,"column":20}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":35,"column":28},"generated":{"line":40,"column":21}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":35,"column":56},"generated":{"line":40,"column":28}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":35,"column":56},"generated":{"line":40,"column":30}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":4},"generated":{"line":41,"column":2}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":41,"column":6}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":15},"generated":{"line":41,"column":13}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":23},"generated":{"line":41,"column":20}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":28},"generated":{"line":41,"column":25}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":36},"generated":{"line":41,"column":33}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":38},"generated":{"line":41,"column":35}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":40},"generated":{"line":42,"column":4}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":47},"generated":{"line":42,"column":11}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":50},"generated":{"line":42,"column":14}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":50},"generated":{"line":42,"column":18}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":61},"generated":{"line":42,"column":37}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":62},"generated":{"line":42,"column":39}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":69},"generated":{"line":42,"column":46}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":36,"column":70},"generated":{"line":42,"column":47}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":4},"generated":{"line":44,"column":2}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":11},"generated":{"line":44,"column":9}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":11},"generated":{"line":44,"column":13}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":20},"generated":{"line":44,"column":29}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":21},"generated":{"line":44,"column":31}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":21},"generated":{"line":44,"column":35}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":27},"generated":{"line":44,"column":49}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":37,"column":28},"generated":{"line":44,"column":51}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":44,"column":52}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":38,"column":8},"generated":{"line":44,"column":56}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":38,"column":19},"generated":{"line":44,"column":75}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":38,"column":20},"generated":{"line":44,"column":77}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":38,"column":33},"generated":{"line":44,"column":98}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":38,"column":34},"generated":{"line":44,"column":99}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":8},"generated":{"line":44,"column":101}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":8},"generated":{"line":44,"column":105}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":19},"generated":{"line":44,"column":124}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":20},"generated":{"line":44,"column":126}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":26},"generated":{"line":44,"column":132}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":27},"generated":{"line":44,"column":133}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":34},"generated":{"line":44,"column":140}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":35},"generated":{"line":44,"column":141}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":41},"generated":{"line":44,"column":147}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":42},"generated":{"line":44,"column":148}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":39,"column":43},"generated":{"line":44,"column":149}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":40,"column":8},"generated":{"line":44,"column":151}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":40,"column":15},"generated":{"line":44,"column":158}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":41,"column":5},"generated":{"line":44,"column":159}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":41,"column":6},"generated":{"line":44,"column":160}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":41,"column":7},"generated":{"line":44,"column":161}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":42,"column":0},"generated":{"line":45,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":46,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":6},"generated":{"line":50,"column":0}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":16},"generated":{"line":50,"column":9}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":29},"generated":{"line":50,"column":22}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":30},"generated":{"line":50,"column":23}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":58},"generated":{"line":50,"column":30}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":60},"generated":{"line":50,"column":32}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":78},"generated":{"line":50,"column":35}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":48,"column":78},"generated":{"line":50,"column":37}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":4},"generated":{"line":51,"column":2}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":10},"generated":{"line":51,"column":8}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":16},"generated":{"line":51,"column":14}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":19},"generated":{"line":51,"column":17}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":30},"generated":{"line":51,"column":28}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":31},"generated":{"line":51,"column":29}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":38},"generated":{"line":51,"column":36}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":49,"column":39},"generated":{"line":51,"column":37}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":4},"generated":{"line":52,"column":2}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":11},"generated":{"line":52,"column":9}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":11},"generated":{"line":52,"column":13}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":25},"generated":{"line":52,"column":35}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":26},"generated":{"line":52,"column":37}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":32},"generated":{"line":52,"column":43}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":34},"generated":{"line":52,"column":45}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":37},"generated":{"line":52,"column":48}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":50,"column":38},"generated":{"line":52,"column":49}},{"source":"../../src.ts/hash/message.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":53,"column":0}}],"sources":{"../../src.ts/hash/message.ts":"import { keccak256 } from \"../crypto/index.js\";\nimport { MessagePrefix } from \"../constants/index.js\";\nimport { recoverAddress } from \"../transaction/index.js\";\nimport { concat, toUtf8Bytes } from \"../utils/index.js\";\n\nimport type { SignatureLike } from \"../crypto/index.js\";\n/**\n *  Computes the [[link-eip-191]] personal-sign message digest to sign.\n *\n *  This prefixes the message with [[MessagePrefix]] and the decimal length\n *  of %%message%% and computes the [[keccak256]] digest.\n *\n *  If %%message%% is a string, it is converted to its UTF-8 bytes\n *  first. To compute the digest of a [[DataHexString]], it must be converted\n *  to [bytes](getBytes).\n *\n *  @example:\n *    hashMessage(\"Hello World\")\n *    //_result:\n *\n *    // Hashes the SIX (6) string characters, i.e.\n *    // [ \"0\", \"x\", \"4\", \"2\", \"4\", \"3\" ]\n *    hashMessage(\"0x4243\")\n *    //_result:\n *\n *    // Hashes the TWO (2) bytes [ 0x42, 0x43 ]...\n *    hashMessage(getBytes(\"0x4243\"))\n *    //_result:\n *\n *    // ...which is equal to using data\n *    hashMessage(new Uint8Array([ 0x42, 0x43 ]))\n *    //_result:\n *\n */\nexport function hashMessage(message: Uint8Array | string): string {\n    if (typeof(message) === \"string\") { message = toUtf8Bytes(message); }\n    return keccak256(concat([\n        toUtf8Bytes(MessagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n\n/**\n *  Return the address of the private key that produced\n *  the signature %%sig%% during signing for %%message%%.\n */\nexport function verifyMessage(message: Uint8Array | string, sig: SignatureLike): string {\n    const digest = hashMessage(message);\n    return recoverAddress(digest, sig);\n}\n"},"lineCount":null}},"error":null,"hash":"8158091f8918f92e5199d9378f43d63c","cacheData":{"env":{}}}