{"id":"node_modules/ethers/lib.esm/hash/id.js","dependencies":[{"name":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\id.js.map","includedInParent":true,"mtime":1724758822989},{"name":"E:\\myprojects\\blockchain\\node_modules\\ethers\\src.ts\\hash\\id.ts","includedInParent":true,"mtime":1724758823254},{"name":"E:\\myprojects\\blockchain\\package.json","includedInParent":true,"mtime":1724758869620},{"name":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\package.json","includedInParent":true,"mtime":1724758822876},{"name":"../crypto/index.js","loc":{"line":1,"column":26,"index":26},"parent":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\id.js","resolved":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\crypto\\index.js"},{"name":"../utils/index.js","loc":{"line":2,"column":28,"index":76},"parent":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\hash\\id.js","resolved":"E:\\myprojects\\blockchain\\node_modules\\ethers\\lib.esm\\utils\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.id = id;\nvar _index = require(\"../crypto/index.js\");\nvar _index2 = require(\"../utils/index.js\");\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nfunction id(value) {\n  return (0, _index.keccak256)((0, _index2.toUtf8Bytes)(value));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":4}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":10}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":13}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":20}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":4}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":11}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":14}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":21}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":4,"column":0},"generated":{"line":9,"column":0}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":15,"column":6},"generated":{"line":20,"column":0}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":15,"column":16},"generated":{"line":20,"column":9}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":15,"column":18},"generated":{"line":20,"column":11}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":15,"column":19},"generated":{"line":20,"column":12}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":15,"column":32},"generated":{"line":20,"column":17}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":15,"column":32},"generated":{"line":20,"column":19}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":4},"generated":{"line":21,"column":2}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":11},"generated":{"line":21,"column":9}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":11},"generated":{"line":21,"column":13}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":20},"generated":{"line":21,"column":29}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":21},"generated":{"line":21,"column":31}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":21},"generated":{"line":21,"column":35}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":32},"generated":{"line":21,"column":54}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":33},"generated":{"line":21,"column":56}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":38},"generated":{"line":21,"column":61}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":39},"generated":{"line":21,"column":62}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":16,"column":40},"generated":{"line":21,"column":63}},{"source":"../../src.ts/hash/id.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":22,"column":0}}],"sources":{"../../src.ts/hash/id.ts":"import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte identifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value: string): string {\n    return keccak256(toUtf8Bytes(value));\n}\n"},"lineCount":null}},"error":null,"hash":"2901af63768685ee8958d1645bcebd08","cacheData":{"env":{}}}